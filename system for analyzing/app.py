from flask import Flask, render_template, request, session, jsonify
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
import os
import pyodbc

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # Set a secret key for session management

# –°—Ç—Ä–æ–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö Access
conn_str = (
    r'DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};'
    r'DBQ=D:\13438\system for analyzing.accdb;'
)

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
SAVE_FOLDER = 'results'
os.makedirs(SAVE_FOLDER, exist_ok=True)
RESULTS_FILE = os.path.join(SAVE_FOLDER, 'all_results.txt')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ—ó–≤
analyzer = SentimentIntensityAnalyzer()

ENGLISH_TEXTS = {
    'Neutral': [
        "Thank you for your excellent service. I appreciate your prompt assistance. üòä",
        "Your kindness and professionalism made my experience truly enjoyable. üëç",
        "I'm grateful for the outstanding support I received. You exceeded my expectations. üôè"
    ],
    'Negative': [
        "The experience was average, with neither positive nor negative aspects standing out. üòï",
        "The service met the standard expectations, but there was nothing remarkable about it. üòê",
        "I have no strong feelings either way about the outcome of the interaction. ü§∑‚Äç‚ôÇÔ∏è"
    ],
}

UKRAINIAN_TEXTS = {
    'Positive': [
        "–°—å–æ–≥–æ–¥–Ω—ñ –±—É–≤ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –µ–ø—ñ—á–Ω–æ –∫—Ä—É—Ç–∏–π –¥–µ–Ω—å, —â–æ –π–æ–º—É –ø—Ä–æ—Å—Ç–æ –Ω–µ–º–∞—î –ø–µ—Ä–µ–≤–µ—Ä—à–µ–Ω–Ω—è!",
        "–ü–æ—á–∏–Ω–∞–ª–æ—Å—å –≤—Å–µ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏—Ö –ø—Ä–∏–≥–æ–¥ –Ω–∞ —Ä–æ–±–æ—Ç—ñ, –∞–ª–µ –º–∏, –∑–Ω–∞—î—Ç–µ, —è–∫—ñ –º–∏ –Ω–µ–∑–ª–∞–º–Ω—ñ –±–æ–π–æ–≤–∏–∫–∏ —ñ–∑ —Å—É–ø–µ—Ä—Å–∏–ª–∏, —è–∫—ñ –∑–¥–∞—Ç–Ω—ñ –ø—Ä–æ—Ç–∏—Å—Ç–æ—è—Ç–∏ –±—É–¥—å-—è–∫–∏–º —Ç—Ä—É–¥–Ω–æ—â–∞–º!",
        "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å, –∑–¥–∞—î—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ—Ç—ñ–≤ —Ç—Ä–æ—à–∫–∏ –≤—ñ–¥–ø–æ—á–∏—Ç–∏, –∞–ª–µ –º–∏ –≤–º—ñ—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, —â–æ–± –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ü—ñ –Ω–µ–≤–µ–ª–∏—á–∫—ñ –ø–µ—Ä–µ—à–∫–æ–¥–∏.",
        "–©–æ–¥–æ –ø–æ–≥–æ–¥–∏... –û—Å—å –≤–æ–Ω–∞, –Ω–∞—à–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–¥—è–≥—Ç–∏ –Ω–∞–π—Å—Ç–∏–ª—å–Ω—ñ—à—É –¥–æ—â–æ–≤—É –∫—É—Ä—Ç–∫—É —Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–∏, —è–∫ –º–∏ –∫—Ä—É—Ç—ñ –Ω–∞–≤—ñ—Ç—å —É –¥–æ—â–æ–≤—É –ø–æ–≥–æ–¥—É!",
        "–ê –≤–µ—á–µ—Ä—è –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ... –û–π, –≤–æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–ª–∞ –Ω–∞–π–∫—Ä–∞—â–∏–º —É—è–≤–Ω–∏–º –∫—ñ–Ω—Ü–µ–º —Ü—å–æ–≥–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–æ–≥–æ –¥–Ω—è!"
    ]
}

def analyze_sentiment(text):
    scores = analyzer.polarity_scores(text)
    neutral_threshold = 0.05
    negative_threshold = -0.1

    if scores['compound'] >= neutral_threshold:
        sentiment = 'Neutral'
    elif scores['compound'] <= negative_threshold:
        sentiment = 'Negative'
    else:
        sentiment = 'Positive'

    return sentiment, scores

@app.route('/', methods=['GET', 'POST'])
def index():
    text = ''
    sentiment = None
    scores = None

    if request.method == 'POST':
        if 'text' in request.form:
            text = request.form['text']
            if text.strip() != '':
                sentiment, scores = analyze_sentiment(text)
            else:
                return render_template('index.html', text=text, sentiment='Error: Text is empty', ukrainian_texts=UKRAINIAN_TEXTS, english_texts=ENGLISH_TEXTS)
        elif 'file' in request.files:
            file = request.files['file']
            if file.filename == '':
                return render_template('index.html', text=text, sentiment='Error: No file selected', ukrainian_texts=UKRAINIAN_TEXTS, english_texts=ENGLISH_TEXTS)
            text = file.read().decode('utf-8')
            sentiment, scores = analyze_sentiment(text)

        if sentiment:
            with open(RESULTS_FILE, 'a', encoding='utf-8') as f:
                f.write(f"Text: {text}\n")
                f.write(f"Sentiment: {sentiment}\n")
                f.write(f"Scores: {scores}\n")
                f.write("\n")

    return render_template('index.html', text=text, sentiment=sentiment, scores=scores, ukrainian_texts=UKRAINIAN_TEXTS, english_texts=ENGLISH_TEXTS)

@app.route('/add_db_text', methods=['POST'])
def add_db_text():
    try:
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        publication_id = request.form.get('publication_id')
        user_id = request.form.get('user_id')
        text = request.form.get('text')
        cursor.execute("INSERT INTO –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó ([ID –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó], [ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞], [–¢–µ–∫—Å—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó], [–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó]) VALUES (?, ?, ?, Now())", (publication_id, user_id, text))
        conn.commit()
        return "Text added to database successfully!"
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/fetch_db_texts')
def fetch_db_texts():
    try:
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        cursor.execute("SELECT [ID –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó], [ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞], [–¢–µ–∫—Å—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó], [–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó] FROM –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó")
        rows = cursor.fetchall()
        result = []
        for row in rows:
            text = row[2]
            scores = analyzer.polarity_scores(text)
            neutral_threshold = 0.05
            negative_threshold = -0.1

            if scores['compound'] >= neutral_threshold:
                sentiment = 'Neutral'
            elif scores['compound'] <= negative_threshold:
                sentiment = 'Negative'
            else:
                sentiment = 'Positive'

            result.append({
                'ID –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó': row[0],
                'ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞': row[1],
                '–¢–µ–∫—Å—Ç –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó': text,
                '–î–∞—Ç–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó': row[3],
                '–ù–∞—Å—Ç—Ä—ñ–π': sentiment
            })
        return render_template('db_texts.html', texts=result)
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/delete_db_text/<int:publication_id>', methods=['POST'])
def delete_db_text(publication_id):
    try:
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM –ü—É–±–ª—ñ–∫–∞—Ü—ñ—ó WHERE [ID –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó] = ?", (publication_id,))
        conn.commit()
        return "Text deleted from database successfully!"
    except Exception as e:
        return jsonify({'error': str(e)})

@app.route('/toggle-theme')
def toggle_theme():
    # Toggle the theme based on the current theme stored in session or a cookie
    if 'theme' in session:
        if session['theme'] == 'light':
            session['theme'] = 'dark'
        else:
            session['theme'] = 'light'
    else:
        # Set the initial theme to light if not set before
        session['theme'] = 'light'

    return session['theme']

if __name__ == '__main__':
    app.run(debug=True)
